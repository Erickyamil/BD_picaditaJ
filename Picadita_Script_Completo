DROP DATABASE IF EXISTS Picadita;
CREATE DATABASE Picadita;
USE Picadita;

-- tabla 1
DROP TABLE IF EXISTS RazonSocial;
CREATE TABLE RazonSocial(
	razon_social_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	nombre VARCHAR(30) NOT NULL,
	rfc_razon_social VARCHAR(13) NOT NULL);

-- tabla 2
DROP TABLE IF EXISTS Politica;
CREATE TABLE Politica(
	politica_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	nombre_politica VARCHAR(50) NOT NULL,
	condicion VARCHAR(20) NOT NULL,
	fecha_agregada DATETIME DEFAULT NULL);
	
	-- tabla 32
DROP TABLE IF EXISTS Proveedor;   
CREATE TABLE Proveedor (
   proveedor_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   nombre_proveedor VARCHAR(30) NOT NULL,
   telefono VARCHAR(15),
   correo VARCHAR(60),
   direccion VARCHAR(60));
   
-- tabla 28
DROP TABLE IF EXISTS Inventario;
CREATE TABLE Inventario (
   objeto_inventario_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   cantidad_en_inventario INT(5) NOT NULL,
   unidad_medida VARCHAR(20) NOT NULL);

-- tabla 5
DROP TABLE IF EXISTS Dia;
CREATE TABLE Dia(
	dia_id INT(1) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	dia VARCHAR(12) NOT NULL);
	
-- tabla 22
DROP TABLE IF EXISTS Promocion;
CREATE TABLE Promocion (
   promocion_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   nombre VARCHAR(30) NOT NULL,
   descripcion VARCHAR(60) NOT NULL,
   condicion ENUM('descuento', 'oferta', 'combo') NOT NULL,  
   dia_aplicable ENUM('lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo') NOT NULL,
   fecha_registro DATETIME NOT NULL,
   fecha_inicio DATETIME NOT NULL,
   fecha_fin DATETIME DEFAULT NULL,
   promocion_activa BOOLEAN NOT NULL);
   
-- tabla 24
DROP TABLE IF EXISTS Categoria;
CREATE TABLE Categoria (
   categoria_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   nombre_categoria VARCHAR(30) NOT NULL);
   
   INSERT INTO Categoria (nombre_categoria)VALUES
    ('Picada'),
    ('Memela'),
    ('Huarache'),
    ('Gordita'),
    ('Salbute'),
    ('Empanada'),
    ('Tostada'),
    ('Doblada'),
    ('Torta'),
    ('Platillo Regional'),
    ('Huevos'),
    ('Caldos'),
    ('Tacos'),
    ('Ensaladas'),
    ('Menú'),
    ('Refresco'),
    ('Bebida Caliente'),
    ('Agua Fresca'),
    ('Jugo'),
    ('Licuado'),
    ('Postre');

-- tabla 3
DROP TABLE IF EXISTS Financiera;
CREATE TABLE Financiera(
	politica_id INT(5) NOT NULL,
	valor DOUBLE NOT NULL,
	FOREIGN KEY (politica_id) REFERENCES Politica(politica_id));

-- tabla 4	
DROP TABLE IF EXISTS Sucursal;
CREATE TABLE Sucursal(
	sucursal_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	nombre_sucursal VARCHAR(60) NOT NULL,
	ubicacion_sucursal VARCHAR(100) NOT NULL,
	numero_telefonico_sucursal CHAR(12) NOT NULL,
	objeto_inventario_id INT(5),
	FOREIGN KEY (objeto_inventario_id) REFERENCES Inventario(objeto_inventario_id));
	
INSERT INTO Sucursal (nombre_sucursal, ubicacion_sucursal, numero_telefonico_sucursal) VALUES 
	('La Picadita Jarocha Sucursal Centro', 'Av. Hidalgo No. 600, Esq. Allende, Col. Centro', '9212121386'),
	('La Picadita Jarocha Sucursal El Palmar', 'Av. Las Palmas No. 101 Int. Loc. 17, Col. Paraiso', '9212121386'),
	('La Picadita Jarocha Sucursal Malecon Costero', 'Altamirano No. 2407 Col. Petroquimica', '9212137072'),
	('La Picadita Jarocha Sucursal Soriana Mercado Coatza', 'Blvd. Juan Osorio Lopez No. 100 Int. Loc. 2, 3 y 4, Col. Héroes de Nacozari', '9212173716'),
	('La Picadita Jarocha Sucursal Gaviotas', 'Av. Jirafas No. 137, esquina con Ceiba, Col. Gaviotas', '9216882551'),
	('La Picadita Jarocha Sucursal Soriana Cuauhtémoc', 'Plaza Soriana, Col. Cuauhtemoc', '9222239947'),
	('La Picadita Jarocha Sucursal Centro', 'José Arenas N° 14, Col. Centro ', '9222237340'),
	('La Picadita Jarocha Sucursal Instituto Tecnológico', 'Instituto Tecnológico, Col. Insurgentes Norte', '9222417821');

-- tabla 6
DROP TABLE IF EXISTS Trabaja;
CREATE TABLE Trabaja (
	dia_id INT,
	sucursal_id INT,
	hora_apertura TIME(0) NOT NULL,
	hora_cierre TIME(0) NOT NULL,
	PRIMARY KEY (dia_id, sucursal_id),
	FOREIGN KEY (dia_id) REFERENCES Dia(dia_id),
	FOREIGN KEY (sucursal_id) REFERENCES Sucursal(sucursal_id));

-- tabla 7
DROP TABLE IF EXISTS SeAplica;
CREATE TABLE SeAplica (
	politica_id INT,
	sucursal_id INT,
	PRIMARY KEY (politica_id, sucursal_id),
	FOREIGN KEY (politica_id) REFERENCES Politica(politica_id),
	FOREIGN KEY (sucursal_id) REFERENCES Sucursal(sucursal_id));

-- tabla 8
DROP TABLE IF EXISTS Tiene;
CREATE TABLE Tiene (
	razon_social_id INT,
	sucursal_id INT,
	PRIMARY KEY (razon_social_id, sucursal_id),
	FOREIGN KEY (razon_social_id) REFERENCES RazonSocial(razon_social_id),
	FOREIGN KEY (sucursal_id) REFERENCES Sucursal(sucursal_id));

-- tabla 9
DROP TABLE IF EXISTS Mesa;
CREATE TABLE Mesa(
	mesa_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	numero_mesa VARCHAR(5) NOT NULL,
	total_personas INT(2) NOT NULL,
	sucursal_id INT,
	FOREIGN KEY (sucursal_id) REFERENCES Sucursal(sucursal_id));

INSERT INTO mesa (numero_mesa, total_personas, sucursal_id) VALUES 
	(10, 4, 1),
	(20, 6, 5),
	(30, 8, 7),
	(40, 4, 8),
	(50, 6, 4),
	(60, 8, 3),
	(70, 4, 1),
	(80, 6, 2),
	(90, 8, 3),
	(100, 4, 4),
	(110, 6, 5),
	(120, 8, 6),
	(130, 4, 7),
	(140, 6, 8),
	(150, 8, 1),
	(160, 4, 2),
	(170, 6, 3),
	(180, 8, 4),
	(190, 4, 5),
	(200, 6, 6),
	(210, 8, 7),
	(220, 4, 8),
	(230, 6, 1),
	(240, 8, 2),
	(250, 4, 3),
	(260, 6, 4),
	(270, 8, 5),
	(280, 4, 6),
	(290, 6, 7),
	(300, 8, 8),
	(310, 4, 1),
	(320, 6, 2),
	(330, 8, 3),
	(340, 4, 4),
	(350, 6, 5),
	(360, 8, 6),
	(370, 4, 7),
	(380, 6, 8),
	(390, 8, 1),
	(400, 4, 2),
	(410, 6, 3),
	(420, 8, 4),
	(430, 4, 5),
	(440, 6, 6),
	(450, 8, 7),
	(460, 4, 8),
	(470, 6, 1),
	(480, 8, 2),
	(490, 4, 3),
	(500, 6, 4),
	(510, 8, 5),
	(520, 4, 6),
	(530, 6, 7),
	(540, 8, 8),
	(550, 4, 1),
	(560, 6, 2),
	(570, 8, 3),
	(580, 4, 4),
	(590, 6, 5),
	(600, 8, 6),
	(610, 4, 7),
	(620, 6, 8),
	(630, 8, 1),
	(640, 4, 2),
	(650, 6, 3),
	(660, 8, 4),
	(670, 4, 5),
	(680, 6, 6),
	(690, 8, 7),
	(700, 4, 8),
	(710, 6, 1),
	(720, 8, 2),
	(730, 4, 3),
	(740, 6, 4),
	(750, 8, 5),
	(760, 4, 6),
	(770, 6, 7),
	(780, 8, 8),
	(790, 4, 1),
	(800, 6, 2),
	(810, 8, 3),
	(820, 4, 4),
	(830, 6, 5),
	(840, 8, 6),
	(850, 4, 7),
	(860, 6, 8),
	(870, 8, 1),
	(880, 4, 2),
	(890, 6, 3),
	(900, 8, 4),
	(910, 4, 5),
	(920, 6, 6),
	(930, 8, 7),
	(940, 4, 8),
	(950, 6, 1),
	(960, 8, 2),
	(970, 4, 3),
	(980, 6, 4),
	(990, 8, 5),
	(1000, 4, 6),
	(1010, 6, 7),
	(1020, 8, 8),
	(1030, 4, 1),
	(1040, 6, 2),
	(1050, 8, 3),
	(1060, 4, 4),
	(1070, 6, 5),
	(1080, 8, 6),
	(1090, 4, 7),
	(1100, 6, 8),
	(1110, 8, 1),
	(1120, 4, 2),
	(1130, 6, 3),
	(1140, 8, 4),
	(1150, 4, 5),
	(1160, 6, 6),
	(1170, 8, 7),
	(1180, 4, 8),
	(1190, 6, 1),
	(1200, 8, 2),
	(1210, 4, 3),
	(1220, 6, 4),
	(1230, 8, 5),
	(1240, 4, 6),
	(1250, 6, 7),
	(1260, 8, 8),
	(1270, 4, 1),
	(1280, 6, 2),
	(1290, 8, 3),
	(1300, 4, 4),
	(1310, 6, 5),
	(1320, 8, 6),
	(1330, 4, 7),
	(1340, 6, 8),
	(1350, 8, 1),
	(1360, 4, 2),
	(1370, 6, 3),
	(1380, 8, 4),
	(1390, 4, 5),
	(1400, 6, 6),
	(1410, 8, 7),
	(1420, 4, 8),
	(1430, 6, 1),
	(1440, 8, 2),
	(1450, 4, 3),
	(1460, 6, 4),
	(1470, 8, 5),
	(1480, 4, 6),
	(1490, 6, 7),
	(1500, 8, 8),
	(1510, 4, 1),
	(1520, 6, 2),
	(1530, 8, 3),
	(1540, 4, 4),
	(1550, 6, 5),
	(1560, 8, 6),
	(1570, 4, 7),
	(1580, 6, 8),
	(1590, 8, 1),
	(1600, 4, 2),
	(1610, 6, 3),
	(1620, 8, 4),
	(1630, 4, 5),
	(1640, 6, 6),
	(1650, 8, 7),
	(1660, 4, 8),
	(1670, 6, 1),
	(1680, 8, 2),
	(1690, 4, 3),
	(1700, 6, 4),
	(1710, 8, 5),
	(1720, 4, 6),
	(1730, 6, 7),
	(1740, 8, 8),
	(1750, 4, 1),
	(1760, 6, 2),
	(1770, 8, 3),
	(1780, 4, 4),
	(1790, 6, 5),
	(1800, 8, 6),
	(1810, 4, 7),
	(1820, 6, 8),
	(1830, 8, 1),
	(1840, 4, 2),
	(1850, 6, 3),
	(1860, 8, 4),
	(1870, 4, 5),
	(1880, 6, 6),
	(1890, 8, 7),
	(1900, 4, 8),
	(1910, 6, 1),
	(1920, 8, 2),
	(1930, 4, 3),
	(1940, 6, 4),
	(1950, 8, 5),
	(1960, 4, 6),
	(1970, 6, 7),
	(1980, 8, 8),
	(1990, 4, 1),
	(2000, 6, 2);

-- tabla 10
DROP TABLE IF EXISTS Submesa;
CREATE TABLE Submesa(
	submesa_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	nombre_cliente VARCHAR(20),
	fecha DATETIME DEFAULT NULL,
	numero_personas INT(2) NOT NULL,
	mesa_id INT,
	FOREIGN KEY (mesa_id) REFERENCES Mesa(mesa_id));

-- tabla 11
DROP TABLE IF EXISTS Orden;
CREATE TABLE Orden (
   orden_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,  
   folio VARCHAR(5) NOT NULL,                             
   tipo VARCHAR(10) NOT NULL,                             
   forma_pago CHAR(10) NOT NULL,                          
   fecha DATETIME NOT NULL,                               
   cambio DECIMAL(10, 2) NOT NULL,                        
   entregado DECIMAL(10, 2) NOT NULL,                    
   submesa_id INT,                                      
   subtotal DECIMAL(10, 2) GENERATED ALWAYS AS (entregado - cambio) STORED, 
   total DECIMAL(10, 2) GENERATED ALWAYS AS (subtotal * 1.16) STORED,       
   no_orden_diario INT,                                  
   FOREIGN KEY (submesa_id) REFERENCES Submesa(submesa_id));

-- Trigger para insertar no_orden_diario
DELIMITER $$

CREATE TRIGGER antes_de_insertar_orden
BEFORE INSERT ON Orden
FOR EACH ROW
BEGIN
   DECLARE numero INT;
   SELECT IFNULL(MAX(no_orden_diario), 0) + 1 INTO numero
   FROM Orden
   WHERE DATE(fecha) = DATE(NEW.fecha);
   SET NEW.no_orden_diario = numero;
END $$

DELIMITER ;

-- tabla 12 
DROP TABLE IF EXISTS Factura;
CREATE TABLE Factura (
   factura_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   uso_cfdi INT(20) NOT NULL,
   rfc VARCHAR(13) NOT NULL,
   regimen_fiscal VARCHAR(6) NOT NULL,
   domicilio_fiscal VARCHAR(60) NOT NULL,
   referencia VARCHAR(20) NOT NULL,
   nombre_sat VARCHAR(60) NOT NULL,
   fecha_emision_factura DATETIME DEFAULT NULL,
	orden_id INT,
	FOREIGN KEY(orden_id) REFERENCES Orden(orden_id));

-- tabla 14
DROP TABLE IF EXISTS Monedero;
CREATE TABLE Monedero (
   monedero_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   nombre_cliente VARCHAR(20) NOT NULL,
   apellido_paterno_cliente VARCHAR(15) NOT NULL,
   apellido_materno_cliente VARCHAR(15),
   fecha_nacimiento_cliente DATE NOT NULL,
   fecha_registro DATETIME NOT NULL,
   saldo DECIMAL(10, 2) NOT NULL DEFAULT 0);

-- tabla 13 
DROP TABLE IF EXISTS Transaccion;
CREATE TABLE Transaccion (
	transaccion_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
	fecha_transaccion DATETIME DEFAULT NULL,
	cantidad INT(5) NOT NULL,
	orden_id INT,
	monedero_id INT,
	FOREIGN KEY(orden_id) REFERENCES Orden(orden_id),
	FOREIGN KEY(monedero_id) REFERENCES Monedero(monedero_id));

DELIMITER $$

CREATE TRIGGER actualizar_saldo_monedero
AFTER INSERT ON Transaccion
FOR EACH ROW
BEGIN
    
   UPDATE Monedero
   SET saldo = saldo + NEW.cantidad
   WHERE monedero_id = NEW.monedero_id;
END $$

DELIMITER ;

-- tabla 15
DROP TABLE IF EXISTS Caja;
CREATE TABLE Caja (
   caja_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,  
   fecha DATE NOT NULL,                                 
   saldo_caja DECIMAL(10, 2) NOT NULL DEFAULT 0
);


DELIMITER $$

CREATE TRIGGER actualizar_saldo_caja
AFTER INSERT ON Orden
FOR EACH ROW
BEGIN
    DECLARE total_orden DECIMAL(10, 2);
    SET total_orden = NEW.total;
    
    IF EXISTS (SELECT 1 FROM Caja WHERE fecha = DATE(NEW.fecha)) THEN
        UPDATE Caja
        SET saldo_caja = saldo_caja + total_orden
        WHERE fecha = DATE(NEW.fecha);
    ELSE
        INSERT INTO Caja (fecha, saldo_caja)
        VALUES (DATE(NEW.fecha), total_orden);
    END IF;
END $$
DELIMITER ;

-- tabla 16 
DROP TABLE IF EXISTS Empleado;
CREATE TABLE Empleado (
   empleado_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   apellido_paterno VARCHAR(20) NOT NULL,
   apellido_materno VARCHAR(20) NOT NULL,
   rfc VARCHAR(13) NOT NULL,
   telefono CHAR(10) NOT NULL,
   cargo VARCHAR(30) NOT NULL,
   turno BOOLEAN NOT NULL,
   salario DECIMAL(10,2) NOT NULL,
   nombre VARCHAR(20) NOT NULL,
   curp VARCHAR(18) NOT NULL,
	caja_id INT,
	FOREIGN KEY(caja_id) REFERENCES Caja(caja_id));

-- tabla 17
DROP TABLE IF EXISTS Atiende;
CREATE TABLE Atiende (
    atiende_id INT NOT NULL AUTO_INCREMENT PRIMARY KEY,  
    caja_id INT NOT NULL,                                 
    empleado_id INT NOT NULL,                             
    saldo_inicial DECIMAL(10, 2) NOT NULL,                
    transaccion_id INT NOT NULL,                          
    monto DECIMAL(10, 2) NOT NULL,                        
    fecha DATETIME NOT NULL,                             
    FOREIGN KEY (caja_id) REFERENCES Caja(caja_id),      
    FOREIGN KEY (empleado_id) REFERENCES Empleado(empleado_id) );

-- tabla 18
CREATE TABLE Cajero (
    empleado_id INT NOT NULL PRIMARY KEY,                 
    total_transacciones INT DEFAULT 0,                    
    FOREIGN KEY (empleado_id) REFERENCES Empleado(empleado_id));

DELIMITER $$

CREATE TRIGGER actualizar_total_transacciones
AFTER INSERT ON Atiende
FOR EACH ROW
BEGIN
    -- Actualiza el total de transacciones del cajero
    UPDATE Cajero
    SET total_transacciones = total_transacciones + 1
    WHERE empleado_id = NEW.empleado_id;
END $$

DELIMITER ;

-- tabla 19
DROP TABLE IF EXISTS Repartidor;
CREATE TABLE Repartidor(
	matricula_vehiculo VARCHAR(7) NOT NULL,
	no_licencia VARCHAR(9) NOT NULL,
	empleado_id INT,
	FOREIGN KEY(empleado_id) REFERENCES Empleado(empleado_id));

-- tabla 20
DROP TABLE IF EXISTS OrdenDomicilio;
CREATE TABLE OrdenDomicilio(
	direccion VARCHAR(80) NOT NULL,
	coste DECIMAL(10) NOT NULL,
	orden_id INT,
	empleado_id INT,
	FOREIGN KEY(empleado_id) REFERENCES Empleado(empleado_id),
	FOREIGN KEY(orden_id) REFERENCES Orden(orden_id));

-- tabla 21
DROP TABLE IF EXISTS OrdenDetalle;
CREATE TABLE OrdenDetalle (
   detalle_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   cantidad INT(2) NOT NULL,
   precio_unitario DECIMAL(10, 2) NOT NULL,  
   importe DECIMAL(10, 2) GENERATED ALWAYS AS (cantidad * precio_unitario) STORED, 
   orden_id INT,
   promocion_id INT,  
   FOREIGN KEY (orden_id) REFERENCES Orden(orden_id),
   FOREIGN KEY (promocion_id) REFERENCES Promocion(promocion_id));

-- tabla 23
DROP TABLE IF EXISTS PromocionDetalle;
CREATE TABLE PromocionDetalle (
   detalle_id INT,
   promocion_id INT,
   PRIMARY KEY (detalle_id, promocion_id),
   FOREIGN KEY (detalle_id) REFERENCES OrdenDetalle(detalle_id),
   FOREIGN KEY (promocion_id) REFERENCES Promocion(promocion_id));

-- tabla 25 
DROP TABLE IF EXISTS Producto; 
CREATE TABLE Producto (
   producto_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   precio_unitario DECIMAL(10,2) NOT NULL,
   nombre_producto VARCHAR(15) NOT NULL,
   categoria_id INT,
   FOREIGN KEY(categoria_id) REFERENCES Categoria(categoria_id));

-- tabla 26
DROP TABLE IF EXISTS ProductoPromocion;
CREATE TABLE ProductoPromocion (
   producto_id INT(5) NOT NULL,
   promocion_id INT(5) NOT NULL,
   PRIMARY KEY (producto_id, promocion_id),
   FOREIGN KEY(producto_id) REFERENCES Producto(producto_id),
   FOREIGN KEY(promocion_id) REFERENCES Promocion(promocion_id));

-- tabla 27
DROP TABLE IF EXISTS Producto_Paquete;
CREATE TABLE Producto_Paquete (
   producto_paquete_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   producto_id INT,
   FOREIGN KEY (producto_id) REFERENCES Producto(producto_id));

-- tabla 29
DROP TABLE IF EXISTS SucursalInventario;
CREATE TABLE SucursalInventario (
    sucursal_id INT(5),
    objeto_inventario_id INT(5),
    PRIMARY KEY (sucursal_id, objeto_inventario_id),
    FOREIGN KEY (sucursal_id) REFERENCES Sucursal(sucursal_id),
    FOREIGN KEY (objeto_inventario_id) REFERENCES Inventario(objeto_inventario_id));

-- tabla 30
DROP TABLE IF EXISTS Producto_Inventario;
CREATE TABLE Producto_Inventario (
   producto_id INT NOT NULL,
   objeto_inventario_id INT NOT NULL,
   PRIMARY KEY (producto_id, objeto_inventario_id),
   FOREIGN KEY (producto_id) REFERENCES Producto(producto_id),
   FOREIGN KEY (objeto_inventario_id) REFERENCES Inventario(objeto_inventario_id));

-- tabla 31
DROP TABLE IF EXISTS Ingrediente;
CREATE TABLE Ingrediente (
   ingrediente_id INT(5) NOT NULL AUTO_INCREMENT PRIMARY KEY,
   nombre_ingrediente VARCHAR(30) NOT NULL,
   objeto_inventario_id INT NOT NULL, 
   FOREIGN KEY (objeto_inventario_id) REFERENCES Inventario(objeto_inventario_id));
   

-- tabla 33
DROP TABLE IF EXISTS Ingrediente_Proveedor; 
CREATE TABLE Ingrediente_Proveedor (
   ingrediente_id INT NOT NULL,
   proveedor_id INT NOT NULL,
   importe DECIMAL(10, 2) NOT NULL,           
   fecha_entrega DATETIME NOT NULL,                
   PRIMARY KEY (ingrediente_id, proveedor_id),
   FOREIGN KEY (ingrediente_id) REFERENCES Ingrediente(ingrediente_id),
   FOREIGN KEY (proveedor_id) REFERENCES Proveedor(proveedor_id)
);
